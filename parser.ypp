%{
#include <iostream>
#include <string>
#include <vector>
#include "ClassTable.hpp"
#include "SymbolTable.hpp"
#include "ClassDef.hpp"
#include "MethodTable.hpp"
#include "FieldType.hpp"
#include "Type.hpp"
#define YYDEBUG 1
using namespace std;

//ukljuciti stablo
ClassTable* classTable;
SymbolTable* symbolTable;
MethodTable* methodTable;
std::string tmp = "tmp";
int i=0;

extern int yylex();
void yyerror(std::string s){
    std::cerr << s << std::endl;
    exit(EXIT_FAILURE);
}
%}
%token return_token class_token public_token private_token int_token double_token void_token string_token 
%token <d> num_double_token
%token <i> num_int_token
%token <s> id_token class_id_token



%nonassoc private_token public_token
%left '+' 

%union {
        std::string* s;
        int i;
        double d;
        ClassDef* cdef;
        std::vector<FieldType*>* vftype;
        FieldType* ftype;
        std::vector<Type*>* vtype;
        std::vector<std::string*>* vstring;
        Type* type;
}

%type <cdef> Class
%type <vftype> ClassBlock 
%type <vftype> Command
%type <vtype> Attribute
%type <vstring> Ids
%type <type> MethodInt MethodVoid MethodString MethodDouble Method MethodCommand MethodBlock Expresion


%%
Program: Program Class                { classTable->add($2); }
|                                      {classTable = new ClassTable();
                                        symbolTable = new SymbolTable();
                                        methodTable = new MethodTable();} 
;

Class: class_token class_id_token '{' ClassBlock '}' { $$ = new ClassDef(*$2,$4);
                                                    symbolTable->deinit();
                                                    methodTable->deinit();
                                                }
;                                                       

ClassBlock: ClassBlock Command                  {  for(auto i = $2->begin();i != $2->end();i++)

                                                                            $1->push_back(*i);

                                                                            $$ = $1; }
|                                               { $$ = new std::vector<FieldType*>();
                                                  symbolTable->init();
                                                  methodTable->init();
                                                }
;

Command:    private_token Attribute ';'   { 
                                            std::vector<FieldType*>* v = new std::vector<FieldType*>();
                                             for(auto i = $2->begin();i != $2->end();i++){
                                                   PrivateAttributeFieldType* t = new PrivateAttributeFieldType(*i);
                                                   v->push_back(t);
                                             }
                                             $$ = v;
                                           }
|           public_token Attribute ';'    { 
                                            std::vector<FieldType*>* v = new std::vector<FieldType*>();
                                             for(auto i = $2->begin();i != $2->end();i++){
                                                   PublicAttributeFieldType* t = new PublicAttributeFieldType(*i);
                                                   v->push_back(t);
                                             }
                                             $$ = v;
                                           }
|           private_token Method          {  std::vector<FieldType*>* v = new std::vector<FieldType*>();


                                                                v->push_back(new PrivateMethodFieldType($2));

                                                                $$ = v;   }
|            public_token Method           { std::vector<FieldType*>* v = new std::vector<FieldType*>();

                                                            v->push_back(new PublicMethodFieldType($2));

                                                            $$ = v;     }
;

Attribute:  int_token Ids        {  std::vector<Type*>* v = new std::vector<Type*>();
                                    for(auto i = $2->begin();i != $2->end();i++){
                                        IntType* t = new IntType(*(*i));
                                        symbolTable->add(t);
                                        v->push_back(t);
                                    }
                                    $$ = v;
                                }
|           double_token Ids     {std::vector<Type*>* v = new std::vector<Type*>();
                                    for(auto i = $2->begin();i != $2->end();i++){
                                        DoubleType* t = new DoubleType(*(*i));
                                        symbolTable->add(t);
                                        v->push_back(t);
                                    }
                                    $$ = v;
                                }
|           string_token Ids     {std::vector<Type*>* v = new std::vector<Type*>();
                                    for(auto i = $2->begin();i != $2->end();i++){
                                        StringType* t = new StringType(*(*i));
                                        symbolTable->add(t);
                                        v->push_back(t);
                                    }
                                    $$ = v;
                                }
;
Ids: Ids ',' id_token  {$1->push_back($3); $$ = $1;}
| id_token             { std::vector<std::string*>* v = new std::vector<std::string*>();
                        v->push_back($1);
                        $$ = v;}
;
Method: MethodInt '(' ')' '{' MethodBlock '}'         {         $$ = $1; 
                                                                std::string type = $$->getType();
                                                                std::string returnType = $5->getType();
                                                                if(!type.compare(returnType))
                                                                    std::cout << "ERROR: method return type missmatch, expected: " << type << std::endl;
                                                                    symbolTable->deinit();
                                                                }
|       MethodDouble '(' ')' '{' MethodBlock '}'      {         $$ = $1;
                                                                std::string type = $$->getType();
                                                                std::string returnType = $5->getType();
                                                                if(!type.compare(returnType))
                                                                    std::cout << "ERROR: method return type missmatch, expected: " << type << std::endl;
                                                                    symbolTable->deinit();
                                                                }
|       MethodString '(' ')' '{' MethodBlock '}'      {         $$ = $1;
                                                                std::string type = $$->getType();
                                                                std::string returnType = $5->getType();
                                                                if(!type.compare(returnType))
                                                                    std::cout << "ERROR: method return type missmatch, expected: " << type << std::endl;
                                                                    symbolTable->deinit();
                                                                }
|       MethodVoid '(' ')' '{' MethodBlock '}'        {         $$ = $1;
                                                                std::string type = $$->getType();
                                                                std::string returnType = $5->getType();
                                                                if(!type.compare(returnType))
                                                                    std::cout << "ERROR: method return type missmatch, expected: " << type << std::endl;
                                                                    symbolTable->deinit();
                                                                }
;
MethodInt: int_token id_token            {$$ = new IntType(*$2);
                                            methodTable->add($$);
                                            symbolTable->init();
                                        }
;
MethodDouble: double_token id_token      {$$ = new DoubleType(*$2);
                                            methodTable->add($$);
                                            symbolTable->init();
                                        }
;
MethodString: string_token id_token      {$$ = new StringType(*$2);
                                            methodTable->add($$);
                                            symbolTable->init();
                                        }
;
MethodVoid: void_token id_token          {$$ = new VoidType(*$2);
                                            methodTable->add($$);
                                            symbolTable->init();
                                        }
;


MethodBlock: MethodBlock MethodCommand    { if($2 != nullptr)
                                                $$ = $2;
                                            else
                                                $$ = $1;
                                          }
 |                                   { $$ = new VoidType("void");} // default value
;

MethodCommand: return_token id_token '(' ')' ';'    { $$ = methodTable->get(*$2);
                                                        if($$ == nullptr)
                                                        std::cout << "ERROR: method " << *$2 << " is not defined." << std::endl;
                                                    }
|   return_token id_token ';'                       { $$ = symbolTable->get(*$2);
                                                        if($$ == nullptr)
                                                        std::cout << "ERROR: variable " << *$2 << "is not defined." << std::endl;
                                                    }
|   Deklaracija  ';'                                {$$ = nullptr; }
|   Inicijalizacija ';'                             {$$ = nullptr; }
|   Dodela ';'                                      {$$ = nullptr; }
|   Expresion ';'                                   {$$ = nullptr; }
;

Inicijalizacija: int_token id_token '=' Expresion   { 
                                        symbolTable->add(new IntType(*$2));
                                        std::string type = $4->getType();
                                        if(!type.compare("double"))
                                            std::cout << "WARRNING implicit conversion" << endl;
                                        else if(type.compare("int"))
                                            std::cout << "ERROR type missmatch" << endl;
                                            }
|   double_token id_token '=' Expresion     { 
                                        symbolTable->add(new DoubleType(*$2));
                                        std::string type = $4->getType();
                                        if(type.compare("double"))
                                            std::cout << "ERROR type missmatch" << endl;
                                            }
|   string_token id_token '=' Expresion     { 
                                        symbolTable->add(new StringType(*$2));
                                        std::string type = $4->getType();
                                        if(type.compare("string"))
                                            std::cout << "ERROR type missmatch" << endl;
                                        }
|   class_id_token id_token '=' Expresion      {
                                        if(classTable->get(*$1) == nullptr)
                                            cout << "ERROR class " << *$1 << "is not defined" << endl;
                                        else{
                                        symbolTable->add(new ClassType(*$1,*$2));
                                        std::string type = $4->getType();
                                        if(type.compare("class"))
                                            std::cout << "ERROR type missmatch" << endl;
                                        }
                                    }
;

Deklaracija: int_token Ids      {
                                    for(auto i = $2->begin();i != $2->end();i++){
                                        IntType* t = new IntType(*(*i));
                                        symbolTable->add(t);
                                        }
                                }
| double_token Ids              {
                                    for(auto i = $2->begin();i != $2->end();i++){
                                        DoubleType* t = new DoubleType(*(*i));
                                        symbolTable->add(t);
                                        }
                                }
| string_token Ids              {
                                    for(auto i = $2->begin();i != $2->end();i++){
                                        StringType* t = new StringType(*(*i));
                                        symbolTable->add(t);
                                        }
                                }
;
Dodela: id_token '=' Expresion   { Type* idType = symbolTable->get(*$1);
                                       if(idType == nullptr){
                                            std::cout << "ERROR: variable " << *$1 << "is not defined." << std::endl;
                                       }else{
                                                std::string type = idType->getType();
                                                std::string returnType = $3->getType();
                                                if(!type.compare("int") && !returnType.compare("double")){
                                                    std::cout << "WARRNING implicit conversion" << endl;
                                                }else if(!type.compare("double") && !returnType.compare("int")){
                                                    std::cout << "WARRNING implicit conversion" << endl;
                                                }else{
                                                    std::cout << "ERROR type missmatch" << std::endl;
                                                }    
                                            }
                                        }
;
Expresion: id_token '.' id_token '(' ')' { 
                                    Type* firstType = symbolTable->get(*$1);
                                    std::string type = firstType->getType();
                                    if(type.compare("class")){
                                        std::cout << "ERROR: " << *$1 << " is not defined as class" << endl;
                                        $$ = nullptr;
                                        
                                    }else{
                                            std::string className = firstType->getClassName();

                                            ClassDef* classInfo = classTable->get(className);
                                        
                                            FieldType* field = classInfo->get(*$3);
                                            if(field == nullptr){
                                                std::cout << "ERROR: " << *$3 << " is not defined in class" << endl;
                                                $$ = nullptr;
                                            }else{
                                                std::string attr = field->getFieldType();
                                                if(attr.compare("method")){
                                                    std::cout << "ERROR: " << *$3 << " is not class method" << endl;
                                                }else{
                                                    std::string access = field->getAccess();
                                                        if(access.compare("private")){
                                                            std::cout << "ERROR: " << *$3 << " is private" << endl;
                                                            $$ = nullptr;
                                                        }else{
                                                            $$ = field->getType();
                                                }
                                            }
                                        }
                                    }
                                }
| id_token '.' id_token         {   Type* firstType = symbolTable->get(*$1);
                                    std::string type = firstType->getType();
                                    if(type.compare("class")){
                                        std::cout << "ERROR: " << *$1 << " is not defined as class" << endl;
                                        $$ = nullptr;
                                    }else{
                                        std::string className = firstType->getClassName();
                                        ClassDef* classInfo = classTable->get(className);
                                        FieldType* field = classInfo->get(*$3);
                                        if(field == nullptr){
                                            std::cout << "ERROR: " << *$3 << " is not defined in class" << endl;
                                            $$ = nullptr;
                                        }else{
                                            std::string attr = field->getFieldType();
                                            if(attr.compare("attribute")){
                                                std::cout << "ERROR: " << *$3 << " is not class attribute" << endl;
                                            }else{
                                                std::string access = field->getAccess();
                                                if(access.compare("private")){
                                                    std::cout << "ERROR: " << *$3 << " is private" << endl;
                                                    $$ = nullptr;
                                                }else{
                                                    $$ = field->getType();
                                                }
                                            }
                                        }
                                    }
                                }
| Expresion '+' Expresion       {   if($1 == nullptr || $3 == nullptr)
                                        $$ = nullptr;
                                    else{
                                        std::string firstType = $1->getType();
                                        std::string secondType = $3->getType();
                                    
                                        if(!firstType.compare(secondType))
                                            $$ = $1;
                                        else if(!firstType.compare("int") && !secondType.compare("double"))
                                            $$ = $3;
                                        else if(!firstType.compare("double") && !secondType.compare("int"))
                                            $$ = $1;
                                        else{
                                            std::cout << "ERROR type missmatch" << endl;
                                            $$ = nullptr;
                                        }
                                    }
                                }
| id_token                      { $$ = symbolTable->get(*$1);
                                    if($$ == nullptr)
                                        std::cout << "ERROR: variable " << *$1 << "is not defined." << std::endl;
                                }
| num_double_token              {   std::string id = std::to_string(i);i++;
                                    tmp.append(id);
                                    $$ = new DoubleType(tmp);}
| num_int_token                 {   std::string id = std::to_string(i);i++;
                                    tmp.append(id);
                                    $$ = new IntType(tmp);}
| id_token '(' ')'              { $$ = methodTable->get(*$1);
                                    if($$ == nullptr)
                                        std::cout << "ERROR: method " << *$1 << " is not defined." << std::endl;
                                }

/*Pazi na dereferenciranje nullptr-a*/
%%

int main(){
    yydebug = 1;
    yyparse();
    return 0;
}
