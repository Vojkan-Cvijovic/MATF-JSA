class A {  
   public int x, y;  
   private int z;  
   public double f() {  
	int a = 5;
       x = 0; y = 3.5;  
       z = 2;  
	}  
}  

class B {  
   public A a;  
   public string d;  
   public void g() {  
     int z = a.x;  
     int d; // OK sakrivamo globalno ime  
     string h = a.y; // greska y je int, a h je string  
     double m = a.y + d; // OK implicitna konverzija  
     a.f();  
     int y = a.z; // greska z je private  
     int t = a.m; // greska nedefinisano polje  
     int s = g(); // greska, g je void  
	}  
}  

public_token int_token id_token '(' ')' Blok	{}
;
Blok: '{' NizNaredbi '}'
;

NizNaredbi: naredba ';' NizNaredbi	{$$ = vector.add($1)}
|					{$$ = new vector()}
;
naredba: int id_token ';'	{tablicaSimbola.add(new intType());$$ = new string(id_token);}
|	string id_token ';'	
| 	double id_token ';'
;
class_token id_token '{' Blok '}' { 
					
				 }

id_token '.' id_token			// a.f;
id_token				// y neko int
id_token '.' id_token '(' Lista ')'	// poziv metode

virtual class Type{
public:
	string type;    // int,double,class,void,string
	sring name;	// A ili B ako type nije class onda je ovo null
	string id; 	// id promnljive
}
Za int 	  ->  intType;	
Za double ->  doubleType;
Za string ->  stringType; 
Za metod  ->  metodType;   // tip povratne vrednosti
Za class  ->  classType;

HashMap<string,Type> tablicaSimbola
HashMap<string,vector<FieldInfo>> tablicaKlasa		// tabica nasih definisanih klasa

class typeWrapper{
	Type* type;
	typeWrapper* next;
}	


class ClassScope{
	vector<FieldInfo> niz;
	string classId;		// A ili B
}
class FieldInfo{
	string id;	// id atributa ili metode
	string fieldType;	// da li je att za atribut ili met za metod
	string type;		// ako je klasa ili prost tip onda njegov tip a ako je metod onda povratna vredonst
	string access;		// da li je private ili public
}



Program: Array_of_object                {}           
|                                       {}                                   
;

Array_of_object: Array_of_object Object  { dodajemo ClassDef iz Object u tablicu klasa }                                          
|                                        { pravimo tablicu klasa }               
;

Object: class_token id_token '{' Class_block '}'    
{ $$ = ClassDef($2,$4); }
;

Class_block: Class_block Command   { $$ = $1.push_back($2)}    
|
          { $$ = new vector<FieldType*>()}
;

















